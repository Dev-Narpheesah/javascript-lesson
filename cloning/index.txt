Definition and Usage
The clone keyword is used to create a copy of an object.

If any of the properties was a reference to another variable or object, then only the reference is copied. Objects are always passed by reference, so if the original object has another object in its properties, the copy will point to the same object. This behavior can be changed by creating a __clone() method in the class.

// to create a new object that copies the top level
 structure of the original object but not in its nested object of array,
 in other word if the original object or array contains nested object 
 or array, the shallow cloe will create new reference to those 
 nested object rather than creating new copies. when u have nested object inside an object
 the reference here will tamper the child object instead of the Main object


 //deep clone is an object in javascript. this means creating a new oject that is
//  entirely sepearated from the original object, such that change in the 
// new object do not affect the original and vice versa. this will creste a new object but
//  nested object will still be reference to the original one


the json.stringify method convert a js object or any format
 to string and during this process all the reference are destroyed


JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax. It is commonly used for transmitting data in web applications (e.g., sending some data from the server to the client, so it can be displayed on a web page, or vice versa).

JSON exists as a string — useful when you want to transmit data across a network. It needs to be converted to a native JavaScript object when you want to access the data. This is not a big issue — JavaScript provides a global JSON object that has methods available for converting between the two.

JSON structure
As described above, JSON is a string whose format very much resembles JavaScript object literal format. You can include the same basic data types inside JSON as you can in a standard JavaScript object — strings, numbers, arrays, booleans, and other object literals. This allows you to construct a data hierarchy, like so:


