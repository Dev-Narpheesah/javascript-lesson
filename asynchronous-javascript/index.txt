Asynchronous JavaScript

What is asynchronous in JavaScript?
In summary, asynchronous programming is an essential concept in JavaScript that allows your code to run in the background without blocking the execution of other code. Developers can create more efficient and responsive applications by using features like callbacks, async/await, and promises.
The examples used in the previous chapter, was very simplified.


The purpose of the examples was to demonstrate the syntax of callback functions:

Example
function myDisplayer(something) {
  document.getElementById("demo").innerHTML = something;
}

function myCalculator(num1, num2, myCallback) {
  let sum = num1 + num2;
  myCallback(sum);
}

myCalculator(5, 5, myDisplayer);

Waiting for Intervals:
When using the JavaScript function setInterval(), you can specify a callback function to be executed for each interval:

Example
setInterval(myFunction, 1000);

function myFunction() {
  let d = new Date();
  document.getElementById("demo").innerHTML=
  d.getHours() + ":" +
  d.getMinutes() + ":" +
  d.getSeconds();
}

//when we are talking aabout asy, we are talking about setinterval() and settimeout()
//method dey with parenthesis
// interval allow u to execute a chunk of codes
//  everytime a specified amount of milliseconds passes

settimeout functions allow u to wait a certain amount
 of time before  executing a chunk of codes

 //*SETINTERVAL () AND SETTIMEOUT ()*//

////* SetInterval is a function that allow you to execute a chunk of code, 
//everyttime a specified amount of milisecond passess.

////* setTimeout allow you to waiat a certain amount of time before executing a chunk 
//of code, do note that other code outside of timeout will continue execution as Normal.

Synchronous
Synchronous refers to real-time communication where each party receives (and if necessary, processes and replies to) messages instantly (or as near to instantly as possible).

A human example is the telephone — during a telephone call you tend to respond to another person immediately.

Many programming commands are also synchronous — for example when you type in a calculation, the environment will return the result to you instantly, unless you program it not to.

What is asynchronous and synchronous code in JavaScript?
Explained: Asynchronous vs. Synchronous Programming
The differences between asynchronous and synchronous include: Async is multi-thread, which means operations or programs can run in parallel. Sync is a single-thread, so only one operation or program will run at a time. Async is non-blocking, which means it will send multiple requests to a server.


What are APIs?
Application Programming Interfaces (APIs) are constructs made available in programming languages to allow developers to create complex functionality more easily. They abstract more complex code away from you, providing some easier syntax to use in its place.

As a real-world example, think about the electricity supply in your house, apartment, or other dwellings. If you want to use an appliance in your house, you plug it into a plug socket and it works. You don't try to wire it directly into the power supply — to do so would be really inefficient and, if you are not an electrician, difficult and dangerous to attempt.

A Web API is a developer's dream.

It can extend the functionality of the browser
It can greatly simplify complex functions
It can provide easy syntax to complex code
What is Web API?
API stands for Application Programming Interface.

A Web API is an application programming interface for the Web.

A Browser API can extend the functionality of a web browser.

A Server API can extend the functionality of a web server.

Example
Get the latitude and longitude of the user's position:

const myElement = document.getElementById("demo");

function getLocation() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(showPosition);
  } else {
    myElement.innerHTML = "Geolocation is not supported by this browser.";
  }
}

function showPosition(position) {
  myElement.innerHTML = "Latitude: " + position.coords.latitude +
  "<br>Longitude: " + position.coords.longitude;
}

What are callbacks in JavaScript?
What is a Callback Function in JavaScript? | Simplilearn
A JavaScript callback is a function which is to be executed after another function has finished execution. A more formal definition would be - Any function that is passed as an argument to another function so that it can be executed in that other function is called as a callback function.


The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.

To learn about the way promises work and how you can use them, we advise you to read Using promises first.

Description
A Promise is a proxy for a value not necessarily known when the promise is created. It allows you to associate handlers with an asynchronous action's eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of immediately returning the final value, the asynchronous method returns a promise to supply the value at some point in the future.

new Promise((resolveOuter) => {
  resolveOuter(
    new Promise((resolveInner) => {
      setTimeout(resolveInner, 1000);
    }),
  );
});


const myPromise = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve("foo");
  }, 300);
});

myPromise
  .then(handleFulfilledA, handleRejectedA)
  .then(handleFulfilledB, handleRejectedB)
  .then(handleFulfilledC, handleRejectedC);

  Promises in JavaScript are a powerful tool for managing asynchronous operations. Let’s dive into the details:

What is a Promise?
A Promise represents the eventual completion (or failure) of an asynchronous operation and its resulting value.
It’s like a placeholder for a value that may not be known immediately when the promise is created.
Promises allow you to handle async tasks in a more organized and structured way.
How Do Promises Work?
A Promise has two primary properties:
State: While a promise is “pending,” it’s actively working. The result is undefined during this phase.
Result: When a promise is “fulfilled,” it holds a specific value. If it’s “rejected,” it contains an error object.
Here’s a basic example of creating and using a promise:
JavaScript

const fetchData = new Promise((resolve, reject) => {
  // Simulate fetching data (e.g., from an API)
  setTimeout(() => {
    const data = { id: 1, name: 'John Doe' };
    resolve(data); // Resolve with the fetched data
  }, 1000);
});

// Using the promise
fetchData
  .then((result) => {
    console.log('Data fetched:', result);
  })
  .catch((error) => {
    console.error('Error fetching data:', error);
  });
AI-generated code. Review and use carefully. More info on FAQ.
In this example:
We create a promise (fetchData) that simulates fetching data after a delay.
If successful, we resolve the promise with the fetched data.
If there’s an error, we reject the promise with an error object.
We use .then() to handle the successful result and .catch() for errors.
Why Should You Care About Promises?
In the past, callbacks were used for async operations, leading to callback hell (nested callbacks).
Promises provide a cleaner alternative.
They allow you to chain async tasks, making code more readable and maintainable.
Async/Await Syntax:
Derived from promises, async/await simplifies handling async code.
Example:
JavaScript

async function fetchData() {
  try {
    const result = await fetchDataFromAPI(); // Await the promise
    console.log('Data fetched:', result);
  } catch (error) {
    console.error('Error fetching data:', error);
  }
}



✨ What is Callback Hell? Callback Hell is a situation in JavaScript where multiple nested callback functions make your code look like it's been through a blender on the highest setting.


The async function declaration creates a binding of a new async function to a given name. The await keyword is permitted within the function body, enabling asynchronous, promise-based behavior to be written in a cleaner style and avoiding the need to explicitly configure promise chains.

function resolveAfter2Seconds() {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve('resolved');
    }, 2000);
  });
}

async function asyncCall() {
  console.log('calling');
  const result = await resolveAfter2Seconds();
  console.log(result);
  // Expected output: "resolved"
}

asyncCall();

async makes a function return a Promise

await makes a function wait for a Promise

Async Syntax
The keyword async before a function makes the function return a promise:

Example
async function myFunction() {
  return "Hello";
}

Await Syntax
The await keyword can only be used inside an async function.

The await keyword makes the function pause the execution and wait for a resolved promise before it continues:

let value = await promise;



try...catch
The try...catch statement is comprised of a try block and either a catch block, a finally block, or both. The code in the try block is executed first, and if it throws an exception, the code in the catch block will be executed. The code in the finally block will always be executed before control flow exits the entire construct.

Description
The try statement always starts with a try block. Then, a catch block or a finally block must be present. It's also possible to have both catch and finally blocks. This gives us three forms for the try statement:

try...catch
try...finally
try...catch...finally

//  try and catch 
try block contain the code that u want to attempt 
if an error occur within this block , js will stop executing,
 the try block will now jump to the catch block''
 the catch block, is a place where you can handle the error , when an error occur,
  it will jump to the Catch..
   finally block is optional , always 
  run either there is a error or Not, kogbonkankan